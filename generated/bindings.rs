/* automatically generated by rust-bindgen */

use libc::FILE;

extern "C" {
    pub fn yices_has_mcsat() -> i32;
}
extern "C" {
    pub fn yices_is_thread_safe() -> i32;
}
extern "C" {
    pub fn yices_init();
}
extern "C" {
    pub fn yices_exit();
}
extern "C" {
    pub fn yices_reset();
}
extern "C" {
    pub fn yices_free_string(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn yices_set_out_of_mem_callback(callback: ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    pub fn yices_error_code() -> error_code_t;
}
extern "C" {
    pub fn yices_error_report() -> *mut error_report_t;
}
extern "C" {
    pub fn yices_clear_error();
}
extern "C" {
    pub fn yices_print_error(f: *mut FILE) -> i32;
}
extern "C" {
    pub fn yices_print_error_fd(fd: ::std::os::raw::c_int) -> i32;
}
extern "C" {
    pub fn yices_error_string() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yices_init_term_vector(v: *mut term_vector_t);
}
extern "C" {
    pub fn yices_init_type_vector(v: *mut type_vector_t);
}
extern "C" {
    pub fn yices_delete_term_vector(v: *mut term_vector_t);
}
extern "C" {
    pub fn yices_delete_type_vector(v: *mut type_vector_t);
}
extern "C" {
    pub fn yices_reset_term_vector(v: *mut term_vector_t);
}
extern "C" {
    pub fn yices_reset_type_vector(v: *mut type_vector_t);
}
extern "C" {
    pub fn yices_bool_type() -> type_t;
}
extern "C" {
    pub fn yices_int_type() -> type_t;
}
extern "C" {
    pub fn yices_real_type() -> type_t;
}
extern "C" {
    pub fn yices_bv_type(size: u32) -> type_t;
}
extern "C" {
    pub fn yices_new_scalar_type(card: u32) -> type_t;
}
extern "C" {
    pub fn yices_new_uninterpreted_type() -> type_t;
}
extern "C" {
    pub fn yices_tuple_type(n: u32, tau: *const type_t) -> type_t;
}
extern "C" {
    pub fn yices_tuple_type1(tau1: type_t) -> type_t;
}
extern "C" {
    pub fn yices_tuple_type2(tau1: type_t, tau2: type_t) -> type_t;
}
extern "C" {
    pub fn yices_tuple_type3(tau1: type_t, tau2: type_t, tau3: type_t) -> type_t;
}
extern "C" {
    pub fn yices_function_type(n: u32, dom: *const type_t, range: type_t) -> type_t;
}
extern "C" {
    pub fn yices_function_type1(tau1: type_t, range: type_t) -> type_t;
}
extern "C" {
    pub fn yices_function_type2(tau1: type_t, tau2: type_t, range: type_t) -> type_t;
}
extern "C" {
    pub fn yices_function_type3(tau1: type_t, tau2: type_t, tau3: type_t, range: type_t) -> type_t;
}
extern "C" {
    pub fn yices_type_is_bool(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_int(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_real(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_arithmetic(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_bitvector(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_tuple(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_function(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_scalar(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_is_uninterpreted(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_test_subtype(tau: type_t, sigma: type_t) -> i32;
}
extern "C" {
    pub fn yices_compatible_types(tau: type_t, sigma: type_t) -> i32;
}
extern "C" {
    pub fn yices_bvtype_size(tau: type_t) -> u32;
}
extern "C" {
    pub fn yices_scalar_type_card(tau: type_t) -> u32;
}
extern "C" {
    pub fn yices_type_num_children(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_type_child(tau: type_t, i: i32) -> type_t;
}
extern "C" {
    pub fn yices_type_children(tau: type_t, v: *mut type_vector_t) -> i32;
}
extern "C" {
    pub fn yices_true() -> term_t;
}
extern "C" {
    pub fn yices_false() -> term_t;
}
extern "C" {
    pub fn yices_constant(tau: type_t, index: i32) -> term_t;
}
extern "C" {
    pub fn yices_new_uninterpreted_term(tau: type_t) -> term_t;
}
extern "C" {
    pub fn yices_new_variable(tau: type_t) -> term_t;
}
extern "C" {
    pub fn yices_application(fun: term_t, n: u32, arg: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_application1(fun: term_t, arg1: term_t) -> term_t;
}
extern "C" {
    pub fn yices_application2(fun: term_t, arg1: term_t, arg2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_application3(fun: term_t, arg1: term_t, arg2: term_t, arg3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_ite(cond: term_t, then_term: term_t, else_term: term_t) -> term_t;
}
extern "C" {
    pub fn yices_eq(left: term_t, right: term_t) -> term_t;
}
extern "C" {
    pub fn yices_neq(left: term_t, right: term_t) -> term_t;
}
extern "C" {
    pub fn yices_not(arg: term_t) -> term_t;
}
extern "C" {
    pub fn yices_or(n: u32, arg: *mut term_t) -> term_t;
}
extern "C" {
    pub fn yices_and(n: u32, arg: *mut term_t) -> term_t;
}
extern "C" {
    pub fn yices_xor(n: u32, arg: *mut term_t) -> term_t;
}
extern "C" {
    pub fn yices_or2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_and2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_xor2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_or3(t1: term_t, t2: term_t, t3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_and3(t1: term_t, t2: term_t, t3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_xor3(t1: term_t, t2: term_t, t3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_iff(left: term_t, right: term_t) -> term_t;
}
extern "C" {
    pub fn yices_implies(left: term_t, right: term_t) -> term_t;
}
extern "C" {
    pub fn yices_tuple(n: u32, arg: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_pair(arg1: term_t, arg2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_triple(arg1: term_t, arg2: term_t, arg3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_select(index: u32, tuple: term_t) -> term_t;
}
extern "C" {
    pub fn yices_tuple_update(tuple: term_t, index: u32, new_v: term_t) -> term_t;
}
extern "C" {
    pub fn yices_update(fun: term_t, n: u32, arg: *const term_t, new_v: term_t) -> term_t;
}
extern "C" {
    pub fn yices_update1(fun: term_t, arg1: term_t, new_v: term_t) -> term_t;
}
extern "C" {
    pub fn yices_update2(fun: term_t, arg1: term_t, arg2: term_t, new_v: term_t) -> term_t;
}
extern "C" {
    pub fn yices_update3(
        fun: term_t,
        arg1: term_t,
        arg2: term_t,
        arg3: term_t,
        new_v: term_t,
    ) -> term_t;
}
extern "C" {
    pub fn yices_distinct(n: u32, arg: *mut term_t) -> term_t;
}
extern "C" {
    pub fn yices_forall(n: u32, var: *mut term_t, body: term_t) -> term_t;
}
extern "C" {
    pub fn yices_exists(n: u32, var: *mut term_t, body: term_t) -> term_t;
}
extern "C" {
    pub fn yices_lambda(n: u32, var: *const term_t, body: term_t) -> term_t;
}
extern "C" {
    pub fn yices_zero() -> term_t;
}
extern "C" {
    pub fn yices_int32(val: i32) -> term_t;
}
extern "C" {
    pub fn yices_int64(val: i64) -> term_t;
}
extern "C" {
    pub fn yices_rational32(num: i32, den: u32) -> term_t;
}
extern "C" {
    pub fn yices_rational64(num: i64, den: u64) -> term_t;
}
extern "C" {
    pub fn yices_parse_rational(s: *const ::std::os::raw::c_char) -> term_t;
}
extern "C" {
    pub fn yices_parse_float(s: *const ::std::os::raw::c_char) -> term_t;
}
extern "C" {
    pub fn yices_add(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_sub(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_neg(t1: term_t) -> term_t;
}
extern "C" {
    pub fn yices_mul(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_square(t1: term_t) -> term_t;
}
extern "C" {
    pub fn yices_power(t1: term_t, d: u32) -> term_t;
}
extern "C" {
    pub fn yices_sum(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_product(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_division(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_idiv(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_imod(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_divides_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_is_int_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_abs(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_floor(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_ceil(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_poly_int32(n: u32, a: *const i32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_poly_int64(n: u32, a: *const i64, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_poly_rational32(
        n: u32,
        num: *const i32,
        den: *const u32,
        t: *const term_t,
    ) -> term_t;
}
extern "C" {
    pub fn yices_poly_rational64(
        n: u32,
        num: *const i64,
        den: *const u64,
        t: *const term_t,
    ) -> term_t;
}
extern "C" {
    pub fn yices_arith_eq_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_neq_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_geq_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_leq_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_gt_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_lt_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_eq0_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_neq0_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_geq0_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_leq0_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_gt0_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_arith_lt0_atom(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_uint32(n: u32, x: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_uint64(n: u32, x: u64) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_int32(n: u32, x: i32) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_int64(n: u32, x: i64) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_zero(n: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_one(n: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_minus_one(n: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvconst_from_array(n: u32, a: *const i32) -> term_t;
}
extern "C" {
    pub fn yices_parse_bvbin(s: *const ::std::os::raw::c_char) -> term_t;
}
extern "C" {
    pub fn yices_parse_bvhex(s: *const ::std::os::raw::c_char) -> term_t;
}
extern "C" {
    pub fn yices_bvadd(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsub(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvneg(t1: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvmul(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsquare(t1: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvpower(t1: term_t, d: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvdiv(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvrem(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsdiv(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsrem(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsmod(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvnot(t1: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvnand(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvnor(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvxnor(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvshl(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvlshr(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvashr(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvand(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvor(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvxor(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvand2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvor2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvxor2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvand3(t1: term_t, t2: term_t, t3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvor3(t1: term_t, t2: term_t, t3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvxor3(t1: term_t, t2: term_t, t3: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsum(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvproduct(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_shift_left0(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_shift_left1(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_shift_right0(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_shift_right1(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_ashift_right(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_rotate_left(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_rotate_right(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvextract(t: term_t, i: u32, j: u32) -> term_t;
}
extern "C" {
    pub fn yices_bvconcat2(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvconcat(n: u32, t: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvrepeat(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_sign_extend(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_zero_extend(t: term_t, n: u32) -> term_t;
}
extern "C" {
    pub fn yices_redand(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_redor(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_redcomp(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvarray(n: u32, arg: *const term_t) -> term_t;
}
extern "C" {
    pub fn yices_bitextract(t: term_t, i: u32) -> term_t;
}
extern "C" {
    pub fn yices_bveq_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvneq_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvge_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvgt_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvle_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvlt_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsge_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsgt_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvsle_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bvslt_atom(t1: term_t, t2: term_t) -> term_t;
}
extern "C" {
    pub fn yices_parse_type(s: *const ::std::os::raw::c_char) -> type_t;
}
extern "C" {
    pub fn yices_parse_term(s: *const ::std::os::raw::c_char) -> term_t;
}
extern "C" {
    pub fn yices_subst_term(n: u32, var: *const term_t, map: *const term_t, t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_subst_term_array(
        n: u32,
        var: *const term_t,
        map: *const term_t,
        m: u32,
        t: *mut term_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_set_type_name(tau: type_t, name: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn yices_set_term_name(t: term_t, name: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn yices_remove_type_name(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn yices_remove_term_name(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn yices_get_type_by_name(name: *const ::std::os::raw::c_char) -> type_t;
}
extern "C" {
    pub fn yices_get_term_by_name(name: *const ::std::os::raw::c_char) -> term_t;
}
extern "C" {
    pub fn yices_clear_type_name(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_clear_term_name(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_get_type_name(tau: type_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn yices_get_term_name(t: term_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn yices_type_of_term(t: term_t) -> type_t;
}
extern "C" {
    pub fn yices_term_is_bool(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_int(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_real(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_arithmetic(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_bitvector(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_tuple(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_function(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_scalar(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_bitsize(t: term_t) -> u32;
}
extern "C" {
    pub fn yices_term_is_ground(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_atomic(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_composite(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_projection(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_sum(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_bvsum(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_is_product(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_constructor(t: term_t) -> term_constructor_t;
}
extern "C" {
    pub fn yices_term_num_children(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_term_child(t: term_t, i: i32) -> term_t;
}
extern "C" {
    pub fn yices_term_children(t: term_t, v: *mut term_vector_t) -> i32;
}
extern "C" {
    pub fn yices_proj_index(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_proj_arg(t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_bool_const_value(t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_bv_const_value(t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_scalar_const_value(t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_bvsum_component(t: term_t, i: i32, val: *mut i32, term: *mut term_t) -> i32;
}
extern "C" {
    pub fn yices_product_component(t: term_t, i: i32, term: *mut term_t, exp: *mut u32) -> i32;
}
extern "C" {
    pub fn yices_num_terms() -> u32;
}
extern "C" {
    pub fn yices_num_types() -> u32;
}
extern "C" {
    pub fn yices_incref_term(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_decref_term(t: term_t) -> i32;
}
extern "C" {
    pub fn yices_incref_type(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_decref_type(tau: type_t) -> i32;
}
extern "C" {
    pub fn yices_num_posref_terms() -> u32;
}
extern "C" {
    pub fn yices_num_posref_types() -> u32;
}
extern "C" {
    pub fn yices_garbage_collect(
        t: *const term_t,
        nt: u32,
        tau: *const type_t,
        ntau: u32,
        keep_named: i32,
    );
}
extern "C" {
    pub fn yices_new_config() -> *mut ctx_config_t;
}
extern "C" {
    pub fn yices_free_config(config: *mut ctx_config_t);
}
extern "C" {
    pub fn yices_set_config(
        config: *mut ctx_config_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn yices_default_config_for_logic(
        config: *mut ctx_config_t,
        logic: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn yices_new_context(config: *const ctx_config_t) -> *mut context_t;
}
extern "C" {
    pub fn yices_free_context(ctx: *mut context_t);
}
extern "C" {
    pub fn yices_context_status(ctx: *mut context_t) -> smt_status_t;
}
extern "C" {
    pub fn yices_reset_context(ctx: *mut context_t);
}
extern "C" {
    pub fn yices_push(ctx: *mut context_t) -> i32;
}
extern "C" {
    pub fn yices_pop(ctx: *mut context_t) -> i32;
}
extern "C" {
    pub fn yices_context_enable_option(
        ctx: *mut context_t,
        option: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn yices_context_disable_option(
        ctx: *mut context_t,
        option: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn yices_assert_formula(ctx: *mut context_t, t: term_t) -> i32;
}
extern "C" {
    pub fn yices_assert_formulas(ctx: *mut context_t, n: u32, t: *const term_t) -> i32;
}
extern "C" {
    pub fn yices_check_context(ctx: *mut context_t, params: *const param_t) -> smt_status_t;
}
extern "C" {
    pub fn yices_check_context_with_assumptions(
        ctx: *mut context_t,
        params: *const param_t,
        n: u32,
        t: *const term_t,
    ) -> smt_status_t;
}
extern "C" {
    pub fn yices_assert_blocking_clause(ctx: *mut context_t) -> i32;
}
extern "C" {
    pub fn yices_stop_search(ctx: *mut context_t);
}
extern "C" {
    pub fn yices_new_param_record() -> *mut param_t;
}
extern "C" {
    pub fn yices_default_params_for_context(ctx: *const context_t, params: *mut param_t);
}
extern "C" {
    pub fn yices_set_param(
        p: *mut param_t,
        pname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn yices_free_param_record(param: *mut param_t);
}
extern "C" {
    pub fn yices_get_unsat_core(ctx: *mut context_t, v: *mut term_vector_t) -> i32;
}
extern "C" {
    pub fn yices_get_model(ctx: *mut context_t, keep_subst: i32) -> *mut model_t;
}
extern "C" {
    pub fn yices_free_model(mdl: *mut model_t);
}
extern "C" {
    pub fn yices_model_from_map(n: u32, var: *const term_t, map: *const term_t) -> *mut model_t;
}
extern "C" {
    pub fn yices_model_collect_defined_terms(mdl: *mut model_t, v: *mut term_vector_t);
}
extern "C" {
    pub fn yices_check_formula(
        f: term_t,
        logic: *const ::std::os::raw::c_char,
        model: *mut *mut model_t,
        delegate: *const ::std::os::raw::c_char,
    ) -> smt_status_t;
}
extern "C" {
    pub fn yices_check_formulas(
        f: *const term_t,
        n: u32,
        logic: *const ::std::os::raw::c_char,
        model: *mut *mut model_t,
        delegate: *const ::std::os::raw::c_char,
    ) -> smt_status_t;
}
extern "C" {
    pub fn yices_has_delegate(delegate: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn yices_export_formula_to_dimacs(
        f: term_t,
        filename: *const ::std::os::raw::c_char,
        simplify_cnf: i32,
        status: *mut smt_status_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_export_formulas_to_dimacs(
        f: *const term_t,
        n: u32,
        filename: *const ::std::os::raw::c_char,
        simplify_cnf: i32,
        status: *mut smt_status_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_get_bool_value(mdl: *mut model_t, t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_get_int32_value(mdl: *mut model_t, t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_get_int64_value(mdl: *mut model_t, t: term_t, val: *mut i64) -> i32;
}
extern "C" {
    pub fn yices_get_rational32_value(
        mdl: *mut model_t,
        t: term_t,
        num: *mut i32,
        den: *mut u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_get_rational64_value(
        mdl: *mut model_t,
        t: term_t,
        num: *mut i64,
        den: *mut u64,
    ) -> i32;
}
extern "C" {
    pub fn yices_get_double_value(mdl: *mut model_t, t: term_t, val: *mut f64) -> i32;
}
extern "C" {
    pub fn yices_get_bv_value(mdl: *mut model_t, t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_get_scalar_value(mdl: *mut model_t, t: term_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_init_yval_vector(v: *mut yval_vector_t);
}
extern "C" {
    pub fn yices_delete_yval_vector(v: *mut yval_vector_t);
}
extern "C" {
    pub fn yices_reset_yval_vector(v: *mut yval_vector_t);
}
extern "C" {
    pub fn yices_get_value(mdl: *mut model_t, t: term_t, val: *mut yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_is_int32(mdl: *mut model_t, v: *const yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_is_int64(mdl: *mut model_t, v: *const yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_is_rational32(mdl: *mut model_t, v: *const yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_is_rational64(mdl: *mut model_t, v: *const yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_is_integer(mdl: *mut model_t, v: *const yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_bitsize(mdl: *mut model_t, v: *const yval_t) -> u32;
}
extern "C" {
    pub fn yices_val_tuple_arity(mdl: *mut model_t, v: *const yval_t) -> u32;
}
extern "C" {
    pub fn yices_val_mapping_arity(mdl: *mut model_t, v: *const yval_t) -> u32;
}
extern "C" {
    pub fn yices_val_function_arity(mdl: *mut model_t, v: *const yval_t) -> u32;
}
extern "C" {
    pub fn yices_val_function_type(mdl: *mut model_t, v: *const yval_t) -> type_t;
}
extern "C" {
    pub fn yices_val_get_bool(mdl: *mut model_t, v: *const yval_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_val_get_int32(mdl: *mut model_t, v: *const yval_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_val_get_int64(mdl: *mut model_t, v: *const yval_t, val: *mut i64) -> i32;
}
extern "C" {
    pub fn yices_val_get_rational32(
        mdl: *mut model_t,
        v: *const yval_t,
        num: *mut i32,
        den: *mut u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_val_get_rational64(
        mdl: *mut model_t,
        v: *const yval_t,
        num: *mut i64,
        den: *mut u64,
    ) -> i32;
}
extern "C" {
    pub fn yices_val_get_double(mdl: *mut model_t, v: *const yval_t, val: *mut f64) -> i32;
}
extern "C" {
    pub fn yices_val_get_bv(mdl: *mut model_t, v: *const yval_t, val: *mut i32) -> i32;
}
extern "C" {
    pub fn yices_val_get_scalar(
        mdl: *mut model_t,
        v: *const yval_t,
        val: *mut i32,
        tau: *mut type_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_val_expand_tuple(mdl: *mut model_t, v: *const yval_t, child: *mut yval_t) -> i32;
}
extern "C" {
    pub fn yices_val_expand_function(
        mdl: *mut model_t,
        f: *const yval_t,
        def: *mut yval_t,
        v: *mut yval_vector_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_val_expand_mapping(
        mdl: *mut model_t,
        m: *const yval_t,
        tup: *mut yval_t,
        val: *mut yval_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_formula_true_in_model(mdl: *mut model_t, f: term_t) -> i32;
}
extern "C" {
    pub fn yices_formulas_true_in_model(mdl: *mut model_t, n: u32, f: *const term_t) -> i32;
}
extern "C" {
    pub fn yices_get_value_as_term(mdl: *mut model_t, t: term_t) -> term_t;
}
extern "C" {
    pub fn yices_term_array_value(
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
        b: *mut term_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_model_term_support(mdl: *mut model_t, t: term_t, v: *mut term_vector_t) -> i32;
}
extern "C" {
    pub fn yices_model_term_array_support(
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
        v: *mut term_vector_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_implicant_for_formula(mdl: *mut model_t, t: term_t, v: *mut term_vector_t) -> i32;
}
extern "C" {
    pub fn yices_implicant_for_formulas(
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
        v: *mut term_vector_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_generalize_model(
        mdl: *mut model_t,
        t: term_t,
        nelims: u32,
        elim: *const term_t,
        mode: yices_gen_mode_t,
        v: *mut term_vector_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_generalize_model_array(
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
        nelims: u32,
        elim: *const term_t,
        mode: yices_gen_mode_t,
        v: *mut term_vector_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_pp_type(f: *mut FILE, tau: type_t, width: u32, height: u32, offset: u32) -> i32;
}
extern "C" {
    pub fn yices_pp_term(f: *mut FILE, t: term_t, width: u32, height: u32, offset: u32) -> i32;
}
extern "C" {
    pub fn yices_pp_term_array(
        f: *mut FILE,
        n: u32,
        a: *const term_t,
        width: u32,
        height: u32,
        offset: u32,
        horiz: i32,
    ) -> i32;
}
extern "C" {
    pub fn yices_print_model(f: *mut FILE, mdl: *mut model_t);
}
extern "C" {
    pub fn yices_pp_model(
        f: *mut FILE,
        mdl: *mut model_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_print_term_values(
        f: *mut FILE,
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_pp_term_values(
        f: *mut FILE,
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_pp_type_fd(
        fd: ::std::os::raw::c_int,
        tau: type_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_pp_term_fd(
        fd: ::std::os::raw::c_int,
        t: term_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_pp_term_array_fd(
        fd: ::std::os::raw::c_int,
        n: u32,
        a: *const term_t,
        width: u32,
        height: u32,
        offset: u32,
        horiz: i32,
    ) -> i32;
}
extern "C" {
    pub fn yices_print_model_fd(fd: ::std::os::raw::c_int, mdl: *mut model_t) -> i32;
}
extern "C" {
    pub fn yices_pp_model_fd(
        fd: ::std::os::raw::c_int,
        mdl: *mut model_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_print_term_values_fd(
        fd: ::std::os::raw::c_int,
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
    ) -> i32;
}
extern "C" {
    pub fn yices_pp_term_values_fd(
        fd: ::std::os::raw::c_int,
        mdl: *mut model_t,
        n: u32,
        a: *const term_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> i32;
}
extern "C" {
    pub fn yices_type_to_string(
        tau: type_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yices_term_to_string(
        t: term_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yices_model_to_string(
        mdl: *mut model_t,
        width: u32,
        height: u32,
        offset: u32,
    ) -> *mut ::std::os::raw::c_char;
}
